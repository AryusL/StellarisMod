namespace = distar

# Randomize L-Cluster outcome on_game_start
event = {
	id = distar.8000
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = dragon_season
		random_list = {
			50 = {
				set_global_flag = gray_goo_crisis_set
				set_global_flag = active_gray_goo
			}
			# 30 = {}
			# 30 = { set_global_flag = dragon_season }
			30 = { set_global_flag = gray_goo_empire_set }
		}
	}
}

country_event = {
	id = distar.10950
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_country_flag = lcluster_opener
		set_global_flag = l_cluster_opened
		# spawn L-Cluster
		country_event = { id = distar.11000 }
		# enable L-Gate
		from.solar_system = {
			if = {
				# flag prevents the Tempest from using this gate,
				# do not set the flag if there's only one l-gate system
				limit = {
					any_system = {
						has_star_flag = lgate
						NOT = { is_same_value = prev }
					}
				}
				set_star_flag = lgate_originating_system
			}
			else = {
				root = { set_country_flag = only_one_lgate }
			}
			random_system_megastructure = {
				limit = {
					is_megastructure_type = lgate_base
					NOT = { has_megastructure_flag = lgate_activated }
				}
				activate_gateway = this
				set_megastructure_flag = lgate_activated
			}
		}
		# outcome, to be determined at game start
		country_event = { id = distar.13000 }
		if = {
			limit = { has_global_flag = gray_goo_crisis_set }
			country_event = { id = graygoo.1 }
			every_megastructure = {
				limit = {
					is_megastructure_type = lgate_base
					NOT = { has_megastructure_flag = lgate_activated }
				}
				activate_gateway = this
				set_megastructure_flag = lgate_activated
			}
		}
		else_if = {
			limit = { has_global_flag = gray_goo_empire_set }
			country_event = { id = graygoo.100 }
		}
		else = {
			country_event = { id = distar.10951 }
			# enable other L-Gates over time
			random_country = {
				limit = { is_country_type = global_event }
				country_event = { id = distar.10960 days = 200 random = 500 }
			}
		}
		# activated terminal egress l-gate
		event_target:lcluster1 = {
			random_system_megastructure = {
				activate_gateway = this
				set_megastructure_flag = lgate_activated
			}
		}
		set_global_flag = lgates_activated_globally
		every_playable_country = {
			if = {
				limit = { is_researching_technology = tech_lgate_activation }
				give_technology = {
					tech = tech_lgate_activation
					message = no
				}
			}
		}
	}
}

# spawn l-cluster
country_event = {
	id = distar.11000
	hide_window = yes

	is_triggered_only = yes

	fire_only_once = yes

	immediate = {
		set_spawn_system_batch = begin
		# batch-processes the spawn_system effects between "begin" and "end",
		# so caches are recalculated only once rather than for every system spawned
		# can also be used when removing and adding hyperlanes
		no_scope = {
			# makes system positions originate from galactic core
			spawn_system = {
				min_distance >= 550
				max_distance <= 560
				min_orientation_angle = 44
				max_orientation_angle = 46
				initializer = distantstars_init_01
			}
			random_system = {
				limit = { has_star_flag = lcluster1 }
				save_global_event_target_as = lcluster1
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = distantstars_init_02
				}
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 114
					max_orientation_angle = 156
					initializer = distantstars_init_03
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 340
					max_orientation_angle = 20
					initializer = distantstars_init_01b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster2 }
				save_global_event_target_as = lcluster2
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 0
					max_orientation_angle = 40
					initializer = distantstars_init_02b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster3 }
				save_global_event_target_as = lcluster3
				spawn_system = {
					min_distance >= 20
					max_distance <= 30
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = distantstars_init_04
				}
				spawn_system = {
					min_distance >= 10
					max_distance <= 50
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = distantstars_init_03b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster4 }
				save_global_event_target_as = lcluster4
				spawn_system = {
					min_distance >= 5
					max_distance <= 10
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = distantstars_init_05
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 20
					max_orientation_angle = 160
					initializer = distantstars_init_04b
				}
			}
			random_system = {
				limit = { has_star_flag = lcluster5 }
				save_global_event_target_as = lcluster5
				spawn_system = {
					min_distance >= 5
					max_distance <= 10
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = gray_system
				}
			}
		}
		random_system = {
			limit = { has_star_flag = lcluster1b }
			save_global_event_target_as = lcluster1b
		}
		random_system = {
			limit = { has_star_flag = lcluster2b }
			save_global_event_target_as = lcluster2b
		}
		random_system = {
			limit = { has_star_flag = lcluster3b }
			save_global_event_target_as = lcluster3b
		}
		random_system = {
			limit = { has_star_flag = lcluster4b }
			save_global_event_target_as = lcluster4b
		}

		# clear all hyperlanes to and within the cluster
		every_system = {
			limit = { has_star_flag = lcluster }
			isolate_system = yes
		}

		# add hyperlanes
		event_target:lcluster5 = {
			add_hyperlane = {
				from = event_target:lcluster5
				to = event_target:lcluster4
			}
		}
		event_target:lcluster4 = {
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster3
			}
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster2
			}
			add_hyperlane = {
				from = event_target:lcluster4
				to = event_target:lcluster4b
			}
		}
		event_target:lcluster3 = {
			add_hyperlane = {
				from = event_target:lcluster3
				to = event_target:lcluster1
			}
			add_hyperlane = {
				from = event_target:lcluster3
				to = event_target:lcluster3b
			}
		}
		event_target:lcluster2 = {
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster1
			}
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster3
			}
			add_hyperlane = {
				from = event_target:lcluster2
				to = event_target:lcluster2b
			}
		}

		event_target:lcluster1 = {
			add_hyperlane = {
				from = event_target:lcluster1
				to = event_target:lcluster1b
			}
		}
		event_target:lcluster1b = {
			add_hyperlane = {
				from = event_target:lcluster1b
				to = event_target:lcluster2b
			}
		}
		set_spawn_system_batch = end
	}
}